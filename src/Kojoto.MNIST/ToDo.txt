To Do:
- Implement saving/loading genomes


Done:
- Change remaining time computation to use fitness score instead of %.


        #region UpdateEvent

        private DateTime _StartTime;
        private DateTime _LastUpdate;
        private double _StartFitness;
        private Action<uint, double> _UpdateEvent;

        private void _FirstUpdateEvent(uint currentGeneration, double maxFitness)
        {
            _StartTime = DateTime.Now;
            _LastUpdate = DateTime.Now;

            // don't write out generation 0
            //Console.WriteLine(string.Format("gen={0:N0} bestFitness={1:N0}", currentGeneration, maxFitness));

            _UpdateEvent = _SecondUpdateEvent;
        }

        private void _SecondUpdateEvent(uint currentGeneration, double maxFitness)
        {
            _LastUpdate = DateTime.Now;
            _StartFitness = maxFitness;

            Console.WriteLine(string.Format("gen={0:N0} bestFitness={1:N0}", currentGeneration, maxFitness));

            _UpdateEvent = _OtherUpdateEvent;
        }

        private void _OtherUpdateEvent(uint currentGeneration, double maxFitness)
        {
            TimeSpan last = DateTime.Now - _LastUpdate;
            TimeSpan total = DateTime.Now - _StartTime;

            double pct = maxFitness / 600000.0;
            double deltaFitness = maxFitness- _StartFitness;
            double remainFitness = 600000 - maxFitness;

            TimeSpan remainTime = new TimeSpan((long)(remainFitness * (double)total.Ticks / deltaFitness));

            Console.WriteLine(string.Format("gen={0:N0} bestFitness={1:N0} percent={2:P1} lastTime={3} totalTime={4} remainTime={5}"
                , currentGeneration
                , maxFitness
                , pct
                , last.ToString(@"d\.hh\:mm\:ss")
                , total.ToString(@"d\.hh\:mm\:ss")
                , remainTime.ToString(@"d\.hh\:mm\:ss")
                ));

            _LastUpdate = DateTime.Now;
        }

        #endregion
